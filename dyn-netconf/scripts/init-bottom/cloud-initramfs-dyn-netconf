#!/bin/sh
set -e

PREREQS=""
case $1 in
	prereqs) echo "${PREREQS}"; exit 0;;
esac

. /scripts/functions

PATH=/usr/sbin:/usr/bin:/sbin:/bin

# doc in klibc-utils /usr/share/doc/libklibc/README.ipconfig.gz
# example below:
#DEVICE='eth0'
#PROTO='dhcp'                    ## none, off, static. not present in precise
#IPV4ADDR='192.168.122.89'
#IPV4BROADCAST='192.168.122.255'
#IPV4NETMASK='255.255.255.0'
#IPV4GATEWAY='192.168.122.1'
#IPV4DNS0='192.168.122.1'        ## only come from dhcp
#IPV4DNS1='0.0.0.0'
#HOSTNAME=''
#DNSDOMAIN=''
#NISDOMAIN=''
#ROOTSERVER='192.168.122.1'
#ROOTPATH=''
#filename=''
#UPTIME='21'
#DHCPLEASETIME='3600'
#DOMAINSEARCH=''

error() { echo "${0##*/}:" "$@" 1>&2; }
configure_net_if_needed() {
	# we want to call configure_networking if and only if ip= was seen
	# on the command line (LP: #1463846)
	local ip="$1"
	# empty 'ip' or ip=none or ip=off specifically mean do not bring up
	[ -z "$ip" ] && return 0
	case "$ip" in
		none|off) return 0;;
	esac
	# configure_networking does not set any flags indicating it tried
	# to run and failed, so we can only look for indication
	# that ipconfig ran, which creates files in /run/net-<device>.conf
	#
	# configure_networking does a check like this.  however, its check is
	# broken in the event that BOOTIF is not found on the command line.
	for f in /run/net-*.conf /tmp/net-*.conf; do
		[ -f "$f" ] && return 0
	done

	configure_networking
}

ni_header() {
	echo "## This file is generated by cloud-initramfs-dyn-netconf"
	echo "auto lo"
	echo "iface lo inet loopback"
}


configure_net_if_needed "$IP" ||
   echo "WARN: ${0##*/}: configure_networking failed" 1>&2

tmpf="/tmp/${0##*/}.ni"

ni_header > "$tmpf"
seen=","
for f in /run/net-*.conf /tmp/net-*.conf; do
	[ -f "$f" ] || continue
	dev=${f#*/net-}; dev=${dev%.conf};
	# perhaps we saw this device from /run and now we're in /tmp
	[ "${seen#*,${dev},}" = "${seen}" ] || continue

	seen="${seen}${dev},"

	DEVICE=""; PROTO=""; IPV4ADDR=""; IPV4NETMASK=""; IPV4GATEWAY="";
	IPV4DNS0=""; IPV4DNS1=""; DNSDOMAIN=""; DOMAINSEARCH=""; filename="";
	. "$f"

	if [ -z "$DEVICE" ]; then
		error "WARNING: $f had no 'DEVICE' set"
		continue
	fi
	# ipconfig on precise does not write PROTO.
	if [ -z "$PROTO" ]; then
		if [ -n "$filename" ]; then
			PROTO="dhcp"
		else
			PROTO="static"
		fi
	fi

	echo "manual $DEVICE"
	if [ "$PROTO" = "dhcp" ]; then
		echo "iface $DEVICE inet dhcp"
	elif [ "$PROTO" = "static" ]; then
		echo "iface $DEVICE inet static"
		[ -n "$IPV4ADDR" ] && printf "\t%s\n" "address $IPV4ADDR"
		[ -n "$IPV4NETMASK" ] && printf "\t%s\n" "netmask $IPV4NETMASK"
		[ -n "$IPV4GATEWAY" ] && printf "\t%s\n" "gateway $IPV4GATEWAY"
	fi
	if [ -n "$IPV4DNS0" -a "$IPV4DNS0" != "0.0.0.0" ]; then
		nsline="dns-nameservers ${IPV4DNS0}"
		[ -n "$IPV4DNS1" -a "$IPV4DNS1" != "0.0.0.0" ] &&
			nsline="${nsline} ${IPV4DNS1}"
		printf "\t%s\n" "$nsline"
	fi
	[ -n "$DNSDOMAIN" -o -n "$DOMAINSEARCH" ] &&
		printf "\t%s\n" "dns-search ${DNSDOMAIN} ${DOMAINSEARCH}"
done >> "$tmpf"

[ -d /run/network ] || mkdir /run/network
mv "$tmpf" /run/network/dynamic-interfaces

# vi: ts=4 noexpandtab
