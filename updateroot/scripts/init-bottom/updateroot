#!/bin/sh
#  Copyright, 2016 Scott Moser <smoser@ubuntu.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see
#    <http://www.gnu.org/licenses/>.
VERBOSITY="1"

prereqs() {
	local o="/scripts/init-bottom/overlayroot"  p=""
	# basically we run after overlayroot but do not depend on it
	for p in "$DESTDIR/" ""; do
		[ -e "$p$o" ] && echo "overlayroot" && return 0
	done
}

[ "$1" != "prereqs" ] || { prereqs; exit; }

debug() {
	local v=$1
	shift
	[ $v -lt $VERBOSITY ] && return 0
	echo "::" "$@"
}

extract_urls() {
	local target="$1" url="" zopt=""
	shift
	for url in "$@"; do
		case "$url" in
			*.tar.gz|*.tgz) zopt="z";;
			*.tar.xz|*.txz) zopt="J";;
			*) zopt="";;
		esac
		debug 1 "# updateroot [$zopt] $url"
		wget "$url" -O - | tar -C "$target" -xp${zopt}f -
	done
	if [ ! -d "$target/.updateroot" ]; then
		return
	fi
	(
	set +f
	fails=0
	for script in "$target/.updateroot/"*; do
		[ -f "$script" -a -x "$script" ] || continue
		debug "running ${script#$target} in target root"
		chroot "$target" "${script#$target}" || {
			fails=$(($fails+1))
			ret=$?
			log_warn "script '${script#$target/}' exited $ret"
		}
	done
	[ $fails -eq 0 ] || exit 1
	)
}

apply_updateroot() {
	local cmdline urls
	if ! read cmdline < /proc/cmdline; then
		log_warn "no /proc/cmdline?"
		return 1
	fi
	set -f
	for tok in $cmdline; do
		case "$tok" in
			updateroot=http://*) urls="${urls} ${tok#*=}";;
		esac
	done
	set +f
	urls=${urls# }
	if [ -z "$urls" ]; then
		debug 1 "no updateroot urls configured in cmdline"
		return 0
	fi

	if ! configure_networking; then
		log_warn "failed configuring networking"
		return 1
	fi

	# only mount rw if not already rw
	local need_remount="false" ret=0
	if ( : > "$rootmnt/.updateroot" ) >/dev/null 2>&1; then
		mount -o remount,rw "$rootmnt" || {
			log_warn "failed mount '$rootmnt' as rw.  Cannot use updateroot."
			return 1;
		}
		need_remount="true"
	fi
	
	# subshell to protect expansion of urls
	( set -f; extract_urls "$rootmnt" $urls )
	ret=$?

	if [ "${need_remount}" = "true" ]; then
		mount -o remount,ro "$rootmnt" || {
			log_warn "failed remounting root '$rootmnt' as ro!"
			return 1
		}
	fi

	return $ret
}

. /scripts/functions

apply_updateroot

# vi: ts=4 noexpandtab
